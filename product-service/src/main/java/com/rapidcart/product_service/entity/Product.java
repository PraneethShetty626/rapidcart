package com.rapidcart.product_service.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.*;

import java.math.BigDecimal;

/**
 * Entity representing a product in the RapidCart system.
 *
 * <p>This class is mapped to the {@code products} table in the database
 * and stores details such as product name, SKU, price, stock level,
 * and availability status.</p>
 *
 * <p>It includes optimistic locking via the {@link #version} field to
 * handle concurrent updates safely.</p>
 */
@Entity
@Table(name = "products")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Product {

    /**
     * The unique identifier for the product.
     * <p>Automatically generated by the database using identity strategy.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long id;

    /**
     * The name of the product.
     * <p>Cannot be blank.</p>
     */
    @NotBlank(message = "Product name is required")
    @Column(nullable = false)
    private String name;

    /**
     * The Stock Keeping Unit (SKU), a unique identifier for the product.
     * <p>Must be unique and non-blank.</p>
     */
    @NotBlank(message = "SKU is required")
    @Column(nullable = false, unique = true)
    private String sku;

    /**
     * The price of the product.
     * <p>Must be positive and not null.</p>
     */
    @NotNull(message = "Price is required")
    @Positive(message = "Price must be positive")
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal price;

    /**
     * The available stock quantity for the product.
     * <p>Must be zero or positive.</p>
     */
    @NotNull(message = "Stock is required")
    @PositiveOrZero(message = "Stock cannot be negative")
    @Column(nullable = false)
    private Integer stock;

    /**
     * Indicates whether the product is active or available for sale.
     * <p>Defaults to {@code true} if not explicitly set.</p>
     */
    @Column(name = "active_status", nullable = false)
    private Boolean activeStatus = true;

    /**
     * The version field used for optimistic locking.
     * <p>This ensures that concurrent updates to the same product
     * do not overwrite each other's changes.</p>
     */
    @Version
    private Integer version;
}
